name: Sync Releases from epicenter-so/epicenter to braden-w/whispering

on:
  release:
    types: [published, edited]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to sync (e.g., v7.2.1)'
        required: false
        type: string

jobs:
  sync-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.release_tag }}" ]; then
            echo "tag=${{ inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Fetch source release information
        id: source_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          echo "Fetching release $TAG from epicenter-so/epicenter..."
          
          # Get release info
          RELEASE_JSON=$(gh api repos/epicenter-so/epicenter/releases/tags/$TAG)
          
          # Extract fields
          echo "name=$(echo "$RELEASE_JSON" | jq -r '.name')" >> $GITHUB_OUTPUT
          echo "body=$(echo "$RELEASE_JSON" | jq -r '.body' | base64 -w 0)" >> $GITHUB_OUTPUT
          echo "draft=$(echo "$RELEASE_JSON" | jq -r '.draft')" >> $GITHUB_OUTPUT
          echo "prerelease=$(echo "$RELEASE_JSON" | jq -r '.prerelease')" >> $GITHUB_OUTPUT
          
          # Get asset URLs
          echo "$RELEASE_JSON" | jq -r '.assets[].browser_download_url' > asset_urls.txt

      - name: Download release assets
        run: |
          mkdir -p release-assets
          while IFS= read -r url; do
            if [ -n "$url" ]; then
              echo "Downloading $(basename "$url")..."
              curl -L -o "release-assets/$(basename "$url")" "$url"
            fi
          done < asset_urls.txt

      - name: Check if release exists in downstream
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          if gh release view "$TAG" --repo braden-w/whispering >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG already exists in braden-w/whispering"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG does not exist in braden-w/whispering"
          fi

      - name: Delete existing release if it exists
        if: steps.check_release.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          echo "Deleting existing release $TAG..."
          gh release delete "$TAG" --repo braden-w/whispering --yes

      - name: Create release in downstream repository
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          NAME="${{ steps.source_release.outputs.name }}"
          BODY=$(echo "${{ steps.source_release.outputs.body }}" | base64 -d)
          DRAFT="${{ steps.source_release.outputs.draft }}"
          PRERELEASE="${{ steps.source_release.outputs.prerelease }}"
          
          # Build command
          CMD="gh release create \"$TAG\" --repo braden-w/whispering --title \"$NAME\""
          
          # Add body as a file to handle special characters
          echo "$BODY" > release_notes.md
          CMD="$CMD --notes-file release_notes.md"
          
          # Add flags
          if [ "$DRAFT" = "true" ]; then
            CMD="$CMD --draft"
          fi
          
          if [ "$PRERELEASE" = "true" ]; then
            CMD="$CMD --prerelease"
          fi
          
          # Add assets if any exist
          if [ -n "$(ls -A release-assets 2>/dev/null)" ]; then
            CMD="$CMD release-assets/*"
          fi
          
          echo "Creating release with command: $CMD"
          eval "$CMD"

      - name: Summary
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          echo "## âœ… Release Synced Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: $TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: [epicenter-so/epicenter](https://github.com/epicenter-so/epicenter/releases/tag/$TAG)" >> $GITHUB_STEP_SUMMARY
          echo "- **Destination**: [braden-w/whispering](https://github.com/braden-w/whispering/releases/tag/$TAG)" >> $GITHUB_STEP_SUMMARY